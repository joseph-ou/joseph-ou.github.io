<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>华为机试题-汽水瓶</title>
      <link href="/2023/05/04/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98-%E6%B1%BD%E6%B0%B4%E7%93%B6/"/>
      <url>/2023/05/04/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98-%E6%B1%BD%E6%B0%B4%E7%93%B6/</url>
      
        <content type="html"><![CDATA[<p>在牛客坐了一道华为面试题，题目如下：</p><h3 id="题目描述">题目描述</h3><p>某商店规定：三个空汽水瓶可以换一瓶汽水，允许向老板借空汽水瓶（但是必须要归还）。</p><p>小张手上有<spanclass="math inline">\(n\)</span>个空汽水瓶，她想知道自己最多可以喝到多少瓶汽水。</p><p>数据范围：输入的正整数满足 <span class="math inline">\(1\leq n \leq100\)</span></p><p>注意：本题存在多组输入。输入的 0 表示输入结束，并不用输出结果。</p><p>输入描述：</p><p>输入文件最多包含 10 组测试数据，每个数据占一行，仅包含一个正整数<span class="math inline">\(n(1\leq n \leq 100)\)</span>，表</p><p>示小张手上的空汽水瓶数。<span class="math inline">\(n=0\)</span>表示输入结束，你的程序不应当处理这一行。</p><p>输出描述：</p><p>对于每组测试数据，输出一行，表示最多可以喝的汽水瓶数。如果一瓶也喝不到，输出0。</p><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">81</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">40</span></span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">样例 <span class="number">1</span> 解释：用三个空瓶换一瓶汽水，剩一个空瓶无法继续交换</span><br><span class="line"></span><br><span class="line">样例 <span class="number">2</span> 解释：用九个空瓶换三瓶汽水，剩四个空瓶再用三个空瓶换一瓶汽水，剩两个空瓶，向老板</span><br><span class="line"></span><br><span class="line">借一个空瓶再用三个空瓶换一瓶汽水喝完得一个空瓶还给老板</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="初步方法分析及其代码实现">初步方法分析及其代码实现</h3><p>以样例1和样例2分析可知，剩空瓶的情况只有三种情况，剩0瓶，剩1瓶和剩2瓶。（剩三瓶可以换一</p><p>瓶）剩一瓶空瓶无法继续交换，所以实际上只有剩两瓶的时候借一瓶这一种情况，所以出现了两种</p><p>不同的思路，第一种思路就是按部就班：</p><p>首先是对所有的汽水瓶除以3换取汽水，然后余下来的汽水瓶加上之前的汽水瓶当作新的除数进</p><p>行上述计算，到最后如果剩下两瓶的时候就借一瓶换一瓶。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:<span class="comment">#因为题目要求给的是几行测试数据，所以要用while true</span></span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    h=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">0</span>:<span class="comment">#两种情况进行区分</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> a==<span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">while</span> a&gt;=<span class="number">3</span>:<span class="comment">#进行while直至剩两瓶的情况</span></span><br><span class="line">            p=a//<span class="number">3</span></span><br><span class="line">            h+=p</span><br><span class="line">            a=a%<span class="number">3</span>+a//<span class="number">3</span></span><br><span class="line">            <span class="keyword">if</span> a==<span class="number">2</span>:</span><br><span class="line">                a+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(h)</span><br></pre></td></tr></table></figure><p>这个问题就解决了，相当的简单。但是加入计数器可以看出这个方法的运行次数还是有待优化，下</p><p>面是稍微修改后的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">h=<span class="number">0</span></span><br><span class="line">count=<span class="number">0</span><span class="comment">#计数器</span></span><br><span class="line"><span class="keyword">if</span> a==<span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a==<span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">while</span> a&gt;=<span class="number">3</span>:</span><br><span class="line">        p=a//<span class="number">3</span></span><br><span class="line">        h+=p</span><br><span class="line">        a=a%<span class="number">3</span>+a//<span class="number">3</span></span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> a==<span class="number">2</span>:</span><br><span class="line">            a+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(h)</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">178</span></span><br><span class="line"><span class="number">89</span></span><br><span class="line"><span class="number">6</span><span class="comment">#循环次数</span></span><br></pre></td></tr></table></figure><p>有没有更好的算法，能尽量减少循环次数，接下来介绍第二种方法，因为三个汽水瓶换一</p><p>瓶，两瓶可以借一凑成三瓶换一瓶喝掉最后还一瓶，这个过程可以优化成把所有的汽水瓶每两个分</p><p>成一组，一组可以借一换一，最后抵消掉，这个方法通过提前换瓶来减少循环计算求商和求余的步</p><p>骤，最后的余数情况只有两种：剩0瓶和剩一瓶，这两种情况都是对结果没有影响的，本质上一次计</p><p>算即可以完成，实现代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    h=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> a==<span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">while</span> a&gt;=<span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(a//<span class="number">2</span>)<span class="comment">#一步完成</span></span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>这下就可以体现出数学的优雅美妙之处，通过一个小小的转换可以把程序优化。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> python </tag>
            
            <tag> 机试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用牛顿迭代法求近似解</title>
      <link href="/2023/04/26/%E5%A6%82%E4%BD%95%E7%94%A8%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95%E6%B1%82%E8%BF%91%E4%BC%BC%E8%A7%A3/"/>
      <url>/2023/04/26/%E5%A6%82%E4%BD%95%E7%94%A8%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95%E6%B1%82%E8%BF%91%E4%BC%BC%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="问题简介">问题简介：</h3><p>此前在网上碰到一题面试题，具体公司忘了（华为外包？），题目描述是：如何不用python内置函数计算<spanclass="math inline">\(\sqrt{3}\)</span>的值</p><p>•计算一个数字的立方根，不使用库函数</p><p>详细描述：</p><p>•接口说明</p><p>原型：</p><p>public static double getCubeRoot(double input)</p><p>输入:double 待求解参数</p><p>返回值:double 输入参数的立方根</p><h5 id="输入描述"><strong>输入描述:</strong></h5><p>待求解参数 double类型</p><h5 id="输出描述"><strong>输出描述:</strong></h5><p>输入参数的立方根 也是double类型</p><p>示例1</p><h5 id="输入">输入</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">216</span></span><br></pre></td></tr></table></figure><h5 id="输出">输出</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6.0</span></span><br></pre></td></tr></table></figure><h3 id="初步方法介绍">初步方法介绍</h3><p>接下来先介绍用内置函数计算<spanclass="math inline">\(\sqrt{2}\)</span>的方法：</p><h4 id="pow函数">1.pow()函数</h4><p>以下是调用math模块的的<code>pow()</code>语法 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.<span class="built_in">pow</span>(x,y) <span class="comment">#计算x的y次方</span></span><br></pre></td></tr></table></figure>以下是内置的<code>pow()</code>语法 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pow</span>(x,y[,z]) <span class="comment">#计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y)%z</span></span><br></pre></td></tr></table></figure> 代码例子：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">a=<span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">b=<span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(math.<span class="built_in">pow</span>(a,b))</span><br></pre></td></tr></table></figure> 输入 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">0.5</span></span><br></pre></td></tr></table></figure> 输出 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.7320508075688772</span></span><br></pre></td></tr></table></figure></p><h4 id="sqrt函数">2.sqrt()函数</h4><p>以下是调用math模块的<code>sqrt()</code>方法，但是该方法只能计算平方根，只作为相关知识介绍<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.sqrt()<span class="comment">#计算开方值</span></span><br></pre></td></tr></table></figure></p><p>代码例子 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">x=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">y=math.sqrt(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure> 输入 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure> 输出 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.0</span></span><br></pre></td></tr></table></figure></p><h4 id="cmath库下的sqrt函数">3.cmath库下的sqrt()函数</h4><p>cmath库多了一个字母c，表示的就是在使用的时候，一般是在负数或者是复数中使用开平方，具体的使用如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cmath</span><br><span class="line">math.sqrt()</span><br></pre></td></tr></table></figure><p>代码例子 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cmath</span><br><span class="line">x=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">y=cmath.sqrt(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure> 输入 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure> 输出 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">2</span>+<span class="number">0j</span>) <span class="comment">#注意，输出类型为complex</span></span><br></pre></td></tr></table></figure>但是题目的要求是不使用相关库函数，所以上面的方法都不能用，其实这道题的考点不是编程，考的是数值分析的内容，接下来介绍牛顿迭代法来求近似解的算法。</p><h3 id="牛顿迭代法知识导引">牛顿迭代法知识导引</h3><p>本部分参照《数值分析》第五版<a href="#fn1" class="footnote-ref"id="fnref1" role="doc-noteref"><sup>1</sup></a></p><h4 id="方程求根及二分法">方程求根及二分法</h4><p>考察有根区间<span class="math inline">\([a,b]\)</span>,取中点<spanclass="math inline">\(x_0=(a+b)/2\)</span>将它分成两半，假设中点<spanclass="math inline">\(x_0\)</span>不是<spanclass="math inline">\(f(x)\)</span>的零点，然后进行根的搜索，即检查<spanclass="math inline">\(f(x_0)\)</span>与<spanclass="math inline">\(f(a)\)</span>是否同号，如果确定同号说明所求的根在<spanclass="math inline">\(x_0\)</span>右侧，此时令<spanclass="math inline">\(a_1=a,b_1=x_0\)</span>,不管出现哪种情况，新的有根区间<spanclass="math inline">\([a_1,b_1]\)</span>长度仅为<spanclass="math inline">\([a,b]\)</span>长度的一半。</p><p>参考图如下<img src="/images/erfenfa.png" alt="二分法参考图" /></p><p>对压缩了的有根区间<spanclass="math inline">\([a_1,b_1]\)</span>又可施行同样的手续，即用中点<spanclass="math inline">\(x_1=(a_1+b_1)/2\)</span>将区间分成两</p><p>半，然后通过根的搜索判定所求根在<spanclass="math inline">\(x_1\)</span>的哪一侧，从而确定一个新的有根区间<spanclass="math inline">\([a_2,b_2]\)</span>,其长</p><p>度为<span class="math inline">\([a_1,b_1]\)</span>的一半。</p><p>如此反复下去</p><p><span class="math display">\[[a,b] \supset [a_1,b_1]\supset[a_2,b_2]\cdots\supset[a_k,b_k]\cdots\]</span></p><p>当<span class="math inline">\(k\to\infty\)</span>时<spanclass="math inline">\([a_k,b_k]\)</span>长度为</p><p><span class="math display">\[b_k-a_k=(b-a)/2^k\]</span></p><p>趋于0，即得如果二分过程无限地继续下去，这些区间最终必收缩于一点<spanclass="math inline">\(x^*\)</span>,该点就是所求的根</p><p>误差为<spanclass="math inline">\(|x^*-x_k|\leq(b_k-a_k)/2&lt;\epsilon\)</span>,<spanclass="math inline">\(\epsilon\)</span>为预定的精度</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span><span class="comment">#这个区间自己估算着给</span></span><br><span class="line">b=<span class="number">2</span></span><br><span class="line">count=<span class="number">0</span><span class="comment">#判断时间复杂度</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    x=(a+b)/<span class="number">2</span></span><br><span class="line">    x1=x*x</span><br><span class="line">    p1=a*a-<span class="number">3</span>&gt;<span class="number">0</span> <span class="comment">#p1 p2 p3判断是否同号</span></span><br><span class="line">    p2=x1-<span class="number">3</span>&gt;<span class="number">0</span></span><br><span class="line">    p3=b*b-<span class="number">3</span>&gt;<span class="number">0</span></span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> p1!=p2:</span><br><span class="line">        a=a</span><br><span class="line">        b=x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a=x</span><br><span class="line">        b=b</span><br><span class="line">    <span class="keyword">if</span> (b-a)/<span class="number">2</span>&lt;<span class="number">10e-8</span>:<span class="comment">#如果精度够了就跳出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.732050895690918</span></span><br><span class="line"><span class="number">23</span></span><br></pre></td></tr></table></figure><p>显然二分法也能求近似解，但是程序的复杂度还是太高，自己给的预定区间影响尤其大，很可能会造成收敛速度慢导致超时，所以要优化算法。于是引入本文的重点——牛顿迭代法。</p><h3 id="牛顿迭代法求解近似值">牛顿迭代法求解近似值</h3><p>设已知方程<span class="math inline">\(f(x_0)=0\)</span>有近似根<spanclass="math inline">\(x_k\)</span>(假定<spanclass="math inline">\(f&#39;(x_k)\geq 0\)</span>),将函数<spanclass="math inline">\(f(x)\)</span>在点<spanclass="math inline">\(x_k\)</span>处展开，有</p><p><span class="math display">\[f(x)\approxf(x_k)+f&#39;(x_k)(x-x_k)\]</span></p><p>于是方程<span class="math inline">\(f(x)=0\)</span>可近似地表示成</p><p><span class="math display">\[f(x_k)+f&#39;(x_k)(x-x_k)=0\]</span></p><p>这是个线性方程，将其根代换为<spanclass="math inline">\(x_{k+1}\)</span>，则<spanclass="math inline">\(x_{k+1}\)</span>的计算公式为</p><p><span class="math display">\[x_{k+1}=x_k-\frac{f(x_k)}{f&#39;(x_k)}k=0,1,\cdots,\]</span></p><p>这就是牛顿法。</p><p>牛顿法有明显的几何解释，本质上也是一种迭代法，方程<spanclass="math inline">\(f(x)=0\)</span>的根<spanclass="math inline">\(x^*\)</span>可解释成曲线<spanclass="math inline">\(f(x)\)</span>与<spanclass="math inline">\(x\)</span>轴的交点的横坐标，设<spanclass="math inline">\(x_k\)</span>是根的某个近似值，过曲线<spanclass="math inline">\(y=f(x)\)</span></p><p>上横坐标为<span class="math inline">\(x_k\)</span>的点<spanclass="math inline">\(P_k\)</span>引切线，并将该切线与<spanclass="math inline">\(x\)</span>轴的交点的横坐标<spanclass="math inline">\(x_{k+1}\)</span>作为<spanclass="math inline">\(x^*\)</span>的新的近似值。注意到切线方程为</p><p><span class="math display">\[y=f(x_k)+f&#39;(x_k)(x-x_k)\]</span></p><p>这样求得的值满足了<spanclass="math inline">\(f(x_k)+f&#39;(x_k)(x-x_k)=0\)</span>，从而得到计算结果。图示如下：</p><figure><imgsrc="https://img-blog.csdnimg.cn/fca93d38ec264b41a788103e8cc48660.png"alt="牛顿法" /><figcaption aria-hidden="true">牛顿法</figcaption></figure><p>这种方法也因此被称为切线法</p><p>以下是牛顿迭代法的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span><span class="comment">#同款复杂度计算</span></span><br><span class="line">x0 = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    xk = x0 - ((x0 * x0 - <span class="number">3</span> )/ (<span class="number">2</span> * x0))<span class="comment">#代入迭代公式</span></span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    x0 = xk</span><br><span class="line">    <span class="keyword">if</span> x0 * x0 - <span class="number">3</span> &lt; <span class="number">10e-8</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x0,count)</span><br></pre></td></tr></table></figure><p>输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.7320508100147276</span>    <span class="number">4</span></span><br></pre></td></tr></table></figure><p>还有定义函数的算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Newton</span>(<span class="params">x0,res=<span class="number">10e-8</span>,count=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        xk = x0 - ((x0 * x0 - <span class="number">3</span>) / (<span class="number">2</span> * x0))</span><br><span class="line">        <span class="keyword">if</span> xk * xk - <span class="number">3</span> &lt; res:</span><br><span class="line">            <span class="built_in">print</span>(x0, count)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        x0 = xk</span><br><span class="line">Newton(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.7321428571428572</span>     <span class="number">3</span></span><br></pre></td></tr></table></figure><p>在迭代次数上可以看出牛顿法在收敛速度上比起二分法有着显著的优势，问题也随之解决。而后还有改良的简化牛顿法和牛顿下山法，本文就不再展开，理论部分的知识可参考数值分析的相关资料。</p><h3 id="参考文献">参考文献</h3><aside id="footnotes" class="footnotes footnotes-end-of-document"role="doc-endnotes"><hr /><ol><li id="fn1"><p>《数值分析》第五版 清华大学出版社 李庆扬 王能超易大义编<a href="#fnref1" class="footnote-back"role="doc-backlink">↩︎</a></p></li></ol></aside>]]></content>
      
      
      <categories>
          
          <category> mathematic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数值分析 </tag>
            
            <tag> 算法 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2023/04/23/%E7%AC%AC%E4%B8%80%E7%AF%87blog/"/>
      <url>/2023/04/23/%E7%AC%AC%E4%B8%80%E7%AF%87blog/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇博客">这是我的第一篇博客</h2><h4 id="个人介绍博客的搭建目的">个人介绍&amp;博客的搭建目的</h4><p>本人在2022年本科毕业，学的专业是数学，经过两年的考研失败也算是看出来自己的智商和数学天赋确实有点欠缺，所以便投身于工作，无奈大学光阴业已虚度，当时自己确实也没有做好长远的打算，在编程学习上也只是把学校的课程将就水过，导致在就业市场上屡屡碰壁。如今痛定思痛，自己搭建了个人博客，把自己这些年自学的数学知识和将要学的编程语言知识，系统地搭建成一个框架，进行总结和提升。此外我也会对自己做的一些项目发表一些浅见。希望这个博客的搭建能对自己以后的发展能够形成帮助。</p><h4 id="谈点有趣的话题">谈点有趣的话题</h4><p>本人从小到大也算是兴趣广泛，也喜欢接触新事物，也爱对事物发表看法，所以该博客也有个人树洞的作用。本人可能时不时也会在上面发表一些个人观点和想法（本人从小爱打球和运动，喜爱音乐，也喜欢二次元和键政），不为别的，只为心情愉悦~~</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂文 </tag>
            
            <tag> 介绍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h2id="本博客是本人的一个知识和技术的储存室">本博客是本人的一个知识和技术的储存室。</h2>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){now.setTime(now.getTime()+1e3);var e=new Date("04/09/2022 00:00:00"),t=Math.trunc(234e8+(now-e)/1e3*17),a=(t/1496e5).toFixed(6),o=new Date("04/22/2022 00:00:00"),n=(now-o)/1e3/60/60/24,r=Math.floor(n),i=(now-o)/1e3/60/60-24*r,s=Math.floor(i);1==String(s).length&&(s="0"+s);var d=(now-o)/1e3/60-1440*r-60*s,l=Math.floor(d);1==String(l).length&&(l="0"+l);var g=(now-o)/1e3-86400*r-3600*s-60*l,b=Math.round(g);1==String(b).length&&(b="0"+b);let c="";c=s<18&&s>=9?`<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-科研摸鱼中.svg' title='什么时候能够实现财富自由呀~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>`:`<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-下班休息啦.svg' title='下班了就该开开心心地玩耍~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=c)}setInterval((()=>{createtime()}),1e3);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
